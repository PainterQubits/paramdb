"""Base classes for parameter dataclasses."""

from __future__ import annotations
from typing import Any
from dataclasses import dataclass, is_dataclass, fields
from typing_extensions import Self, dataclass_transform
from paramdb._param_data._param_data import ParamData


@dataclass_transform()
class ParamDataclass(ParamData):
    """
    Subclass of :py:class:`ParamData`.

    Base class for parameter data classes. Subclasses are automatically converted to
    data classes. For example::

        class CustomParam(ParamDataclass):
            value1: float
            value2: int


    Any keyword arguments given when creating a subclass are passed internally to the
    standard ``@dataclass()`` decorator.
    """

    __field_names: set[str]

    # pylint: disable-next=unused-argument
    def __new__(cls, *args: Any, **kwargs: Any) -> Self:
        # Prevent instantiating ParamDataclass and call the superclass __init__() here
        # since __init__() will be overwritten by dataclass()
        if cls is ParamDataclass:
            raise TypeError("only subclasses of ParamDataclass can be instantiated")
        self = super(ParamDataclass, cls).__new__(cls)
        super(ParamDataclass, self).__init__()  # pylint: disable=super-with-arguments
        return self

    def __init_subclass__(cls, /, **kwargs: Any) -> None:
        # Convert subclasses into dataclasses
        super().__init_subclass__()  # kwargs are passed to dataclass constructor
        dataclass(**kwargs)(cls)
        cls.__field_names = (
            {f.name for f in fields(cls)} if is_dataclass(cls) else set()
        )

    def __post_init__(self) -> None:
        # Called by the self.__init__() generated by dataclass()
        for field_name in self.__field_names:
            self._add_child(getattr(self, field_name))

    def __getitem__(self, name: str) -> Any:
        # Enable getting attributes via square brackets
        return getattr(self, name)

    def __setitem__(self, name: str, value: Any) -> None:
        # Enable setting attributes via square brackets
        setattr(self, name, value)

    def __setattr__(self, name: str, value: Any) -> None:
        # If this attribute is a Data Class field, update last updated and children
        if name in self.__field_names:
            old_value = getattr(self, name) if hasattr(self, name) else None
            super().__setattr__(name, value)
            self._update_last_updated()
            self._remove_child(old_value)
            self._add_child(value)
            return
        super().__setattr__(name, value)

    def _to_json(self) -> dict[str, Any]:
        if is_dataclass(self):
            return {f.name: getattr(self, f.name) for f in fields(self) if f.init}
        return {}

    @classmethod
    def _from_json(cls, json_data: dict[str, Any]) -> Self:
        return cls(**json_data)
